[
    {
        "id": "b7b2c63b.6f06f8",
        "type": "subflow",
        "name": "Simon Says",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 200,
                "y": 60,
                "wires": [
                    {
                        "id": "51a5f3b.f15830c"
                    },
                    {
                        "id": "644c9c1e.1f3344"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 968,
                "y": 220,
                "wires": [
                    {
                        "id": "b01289fb.8e0648",
                        "port": 0
                    }
                ]
            }
        ],
        "env": []
    },
    {
        "id": "2453440e.88ac3c",
        "type": "inject",
        "z": "b7b2c63b.6f06f8",
        "name": "Example Green",
        "topic": "simon_says",
        "payload": "{\"id\":\"green\",\"action\":\"pressed\"}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 160,
        "y": 120,
        "wires": [
            [
                "644c9c1e.1f3344"
            ]
        ]
    },
    {
        "id": "97a5c15d.17e65",
        "type": "inject",
        "z": "b7b2c63b.6f06f8",
        "name": "Example Red",
        "topic": "simon_says",
        "payload": "{\"id\":\"red\",\"action\":\"pressed\"}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 170,
        "y": 180,
        "wires": [
            [
                "644c9c1e.1f3344"
            ]
        ]
    },
    {
        "id": "f7997e88.e7aa8",
        "type": "inject",
        "z": "b7b2c63b.6f06f8",
        "name": "Example Blue",
        "topic": "simon_says",
        "payload": "{\"id\":\"blue\",\"action\":\"pressed\"}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 170,
        "y": 240,
        "wires": [
            [
                "644c9c1e.1f3344"
            ]
        ]
    },
    {
        "id": "8f5bf9df.3f9058",
        "type": "inject",
        "z": "b7b2c63b.6f06f8",
        "name": "Example Yellow",
        "topic": "simon_says",
        "payload": "{\"id\":\"yellow\",\"action\":\"pressed\"}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 160,
        "y": 300,
        "wires": [
            [
                "644c9c1e.1f3344"
            ]
        ]
    },
    {
        "id": "eb1ad527.c5c188",
        "type": "inject",
        "z": "b7b2c63b.6f06f8",
        "name": "Reset Variables",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 160,
        "y": 400,
        "wires": [
            [
                "2c45a490.dd2f3c"
            ]
        ]
    },
    {
        "id": "2c45a490.dd2f3c",
        "type": "function",
        "z": "b7b2c63b.6f06f8",
        "name": "Set Variables",
        "func": "global.set('round',1);\nglobal.set('position',0);\nglobal.set('round_amount',6);\n\n/*\n// Generate new rounds\nvar round_amount = global.get('round_amount');\nvar round_value=\"\";\nfor (var i=0, t=round_amount; i<t; i++) {\n    rnd_number = Math.floor((Math.random() * 4) + 1);\n    if(i>0){\n        round_value +=\" \";\n    }\n    switch(rnd_number){\n        case 1: \n            round_value+=\"green\";\n            break;\n        case 2:\n            round_value+=\"red\";\n            break;\n        case 3:\n            round_value+=\"blue\";\n            break;\n        case 4:\n            round_value+=\"yellow\";\n            break;\n        }\n        global.set('round_'+(i+1),round_value);\n    }\n*/\n/* Hardcoded round */\nglobal.set('round_1',\"green\")\nglobal.set('round_2',\"green blue\")\nglobal.set('round_3',\"green blue red\")\nglobal.set('round_4',\"green blue red green\")\nglobal.set('round_5',\"green blue red green yellow\")\nglobal.set('round_6',\"solved\")\n",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 400,
        "wires": [
            [
                "fc2db662.24ab28",
                "a971208d.e81ad"
            ]
        ]
    },
    {
        "id": "c3fc3609.824bf8",
        "type": "debug",
        "z": "b7b2c63b.6f06f8",
        "name": "Print next round",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 660,
        "y": 160,
        "wires": []
    },
    {
        "id": "a971208d.e81ad",
        "type": "mqtt out",
        "z": "b7b2c63b.6f06f8",
        "name": "",
        "topic": "simon/set",
        "qos": "",
        "retain": "",
        "broker": "9897dc40.deeac",
        "x": 640,
        "y": 280,
        "wires": []
    },
    {
        "id": "644c9c1e.1f3344",
        "type": "function",
        "z": "b7b2c63b.6f06f8",
        "name": "validate",
        "func": "if(msg.payload === true){\n    global.set('position',0);\n    global.set('round',1);\n    msg.payload = global.get(\"round_1\");\n    return msg;\n}\n\n\n// Get next Round and the assoziated value\nvar round = global.get('round');\nvar round_raw = global.get('round_'+round);\nvar round_values = round_raw.split(\" \");\n\n// Get Position in the current round\nvar position = global.get('position');\n\n// Get color currently pressed\nvar button = msg.payload.id;\nvar button_color = \"green\";\nswitch(button){\n    case \"green\":\n        button_color = \"green\";\n        break;\n    case \"red\":\n        button_color = \"red\";\n        break;\n    case \"blue\":\n        button_color = \"blue\";\n        break;\n    case \"yellow\":\n        button_color = \"yellow\";\n        break;\n}\n\n// Validate based on current round\nif(button_color === round_values[position]){\n     node.warn(\"match\");\n    if(round_values.length === position+1){\n        round++;\n        global.set('round',round);\n        global.set('position',0);\n        msg.payload = global.get('round_'+round);\n        return msg;\n    }else{\n        global.set('position',position+1);\n    }\n}else if(round_values[0] === 'solved'){\n    msg.payload = round_json;\n    return msg;\n}else{\n      node.warn(\"Default\");\n    // Default: Back to round one\n    global.set('position',0);\n    global.set('round',1);\n    \n    /*\n    // Generate new rounds\n    var round_amount = global.get('round_amount');\n    var round_value=\"\";\n    for (var i=0, t=round_amount; i<t; i++) {\n        rnd_number = Math.floor((Math.random() * 4) + 1);\n        if(i>0){\n            round_value +=\" \";\n        }\n        switch(rnd_number){\n            case 1: \n                round_value+=\"green\";\n                break;\n            case 2:\n                round_value+=\"red\";\n                break;\n            case 3:\n                round_value+=\"blue\";\n                break;\n            case 4:\n                round_value+=\"yellow\";\n                break;\n        }\n        global.set('round_'+(i+1),round_value);\n    }\n    */\n    msg.payload = global.get('round_1');\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 420,
        "y": 180,
        "wires": [
            [
                "c3fc3609.824bf8",
                "a971208d.e81ad",
                "3f7efb8d.535d94"
            ]
        ]
    },
    {
        "id": "fc2db662.24ab28",
        "type": "debug",
        "z": "b7b2c63b.6f06f8",
        "name": "Print first round",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 606,
        "y": 397,
        "wires": []
    },
    {
        "id": "51a5f3b.f15830c",
        "type": "debug",
        "z": "b7b2c63b.6f06f8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 520,
        "y": 80,
        "wires": []
    },
    {
        "id": "3f7efb8d.535d94",
        "type": "switch",
        "z": "b7b2c63b.6f06f8",
        "name": "Wenn gelöst",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "solved",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 650,
        "y": 220,
        "wires": [
            [
                "b01289fb.8e0648"
            ]
        ]
    },
    {
        "id": "b01289fb.8e0648",
        "type": "change",
        "z": "b7b2c63b.6f06f8",
        "name": "Gelöst senden",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 838,
        "y": 221,
        "wires": [
            []
        ]
    },
    {
        "id": "5eb1a328.a0b30c",
        "type": "subflow",
        "name": "Cables",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 80,
                "wires": [
                    {
                        "id": "2cf6a48c.e6442c"
                    },
                    {
                        "id": "b9b61307.eb9f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 880,
                "y": 240,
                "wires": [
                    {
                        "id": "62768466.833b7c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": []
    },
    {
        "id": "b9b61307.eb9f",
        "type": "function",
        "z": "5eb1a328.a0b30c",
        "name": "Check cables",
        "func": "// Configure cables\n// 0 = Connected\n// 1 = Not Connected\nvar yellow = 1;\nvar blue = 0;\nvar white = 1;\nvar green = 0;\nvar black = 0;\nvar red = 1;\nvar orange = 0;\n\n// Check value\nvar value = parseInt(msg.payload.split(\":\")[1]);\nvar factor = 1;\nvar sum=orange*1+red*10+black*100+green*1000+white*10000+blue*100000+yellow*1000000;\nnode.warn(sum);\nif(sum === value){\n    node.warn(\"Solved\");\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 400,
        "y": 120,
        "wires": [
            [
                "168ddd21.745fe3"
            ]
        ]
    },
    {
        "id": "168ddd21.745fe3",
        "type": "function",
        "z": "5eb1a328.a0b30c",
        "name": "ACK",
        "func": "msg.payload=\"{\\\"ack\\\":1}\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 550,
        "y": 180,
        "wires": [
            [
                "7c72d1a7.161d6",
                "62768466.833b7c"
            ]
        ]
    },
    {
        "id": "7c72d1a7.161d6",
        "type": "mqtt out",
        "z": "5eb1a328.a0b30c",
        "name": "",
        "topic": "cable-riddle/set",
        "qos": "",
        "retain": "",
        "broker": "9897dc40.deeac",
        "x": 740,
        "y": 180,
        "wires": []
    },
    {
        "id": "2cf6a48c.e6442c",
        "type": "debug",
        "z": "5eb1a328.a0b30c",
        "name": "Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 370,
        "y": 80,
        "wires": []
    },
    {
        "id": "62768466.833b7c",
        "type": "change",
        "z": "5eb1a328.a0b30c",
        "name": "Gelöst senden",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "c1827fd5.4fdee",
        "type": "subflow",
        "name": "Morsen",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 113,
                "y": 207,
                "wires": [
                    {
                        "id": "b42b378e.4b5268"
                    },
                    {
                        "id": "f9d2ea49.d8c8d8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1820,
                "y": 240,
                "wires": [
                    {
                        "id": "f9d2ea49.d8c8d8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": []
    },
    {
        "id": "cb0a3f0b.49673",
        "type": "switch",
        "z": "c1827fd5.4fdee",
        "name": "Drücken oder Loslassen",
        "property": "payload.action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "pressed",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "release",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 120,
        "wires": [
            [
                "3e7db12e.c43fde",
                "ba4e409e.b919d"
            ],
            [
                "ba4e409e.b919d",
                "e191a530.579318"
            ]
        ]
    },
    {
        "id": "3e7db12e.c43fde",
        "type": "change",
        "z": "c1827fd5.4fdee",
        "name": "Zeit zurücksetzen",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 60,
        "wires": [
            [
                "f44ac42b.2b75e8"
            ]
        ]
    },
    {
        "id": "ba4e409e.b919d",
        "type": "delay",
        "z": "c1827fd5.4fdee",
        "name": "Nachrichten verzögern für reset",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 610,
        "y": 120,
        "wires": [
            [
                "f44ac42b.2b75e8",
                "dc47f393.5ce8c"
            ]
        ]
    },
    {
        "id": "c89af099.89eb4",
        "type": "function",
        "z": "c1827fd5.4fdee",
        "name": "Morse code prüfen",
        "func": "var solution_code = global.get('solution_code');\nvar current_code = global.get('current_code');\n\nif(current_code === \"\"){\n    msg.payload.paused=0;\n}\n//Get current morse code\nif(msg.payload.pressed > 1000){\n    current_code+=\"long \";\n}else if(msg.payload.pressed > 10 ){\n    current_code+=\"short \";\n}\n/*\n}else if(msg.payload.paused > 50000 ){\n    current_code+=\"word \";\n}else if(msg.payload.paused > 2000 ){\n    current_code+=\"next \";\n}\n*/\nnode.warn(current_code);\nif(current_code === solution_code){\n    node.warn(\"solved\");\n    msg.payload = \"solved\";\n    global.set('current_code',\"\");\n}else if(current_code === solution_code.substring(0,current_code.length)){\n    msg.payload = \"in progress\";\n    global.set('current_code',current_code);\n}else{\n    node.warn(\"failed\");\n    msg.payload = \"failed\"; \n    global.set('current_code',\"\");\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1150,
        "y": 100,
        "wires": [
            [
                "b42b378e.4b5268",
                "1a72444d.0bea3c"
            ]
        ]
    },
    {
        "id": "b42b378e.4b5268",
        "type": "debug",
        "z": "c1827fd5.4fdee",
        "name": "Ausgabe",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1400,
        "y": 100,
        "wires": []
    },
    {
        "id": "79d9fa0b.562cd4",
        "type": "inject",
        "z": "c1827fd5.4fdee",
        "name": "Variablen zurücksetzen",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 190,
        "y": 390,
        "wires": [
            [
                "54f19c.4c60fe64"
            ]
        ]
    },
    {
        "id": "54f19c.4c60fe64",
        "type": "function",
        "z": "c1827fd5.4fdee",
        "name": "Globale Variablen setzen",
        "func": "/*\nshort = <1 Sec. pressed\nlong =  >1 Sec. pressed\nnext =  >2 Sec. pause (next letter)\nword =  >5 Sec. pause (next word)\n*/\nglobal.set('solution_code',\n\"short short short short \" +   //H\n\"short long \" +                //A\n\"short long short short \" + //L\n\"short long short short \" + //L\n\"long long long \")   //O\n\nglobal.set('current_code',\"\")\nglobal.set('position',0);",
        "outputs": 0,
        "noerr": 0,
        "x": 470,
        "y": 391,
        "wires": []
    },
    {
        "id": "e191a530.579318",
        "type": "change",
        "z": "c1827fd5.4fdee",
        "name": "Zeit zurücksetzen",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 180,
        "wires": [
            [
                "dc47f393.5ce8c"
            ]
        ]
    },
    {
        "id": "f44ac42b.2b75e8",
        "type": "interval-length",
        "z": "c1827fd5.4fdee",
        "format": "mills",
        "bytopic": true,
        "minimum": "",
        "maximum": "",
        "window": "",
        "timeout": false,
        "msgTimeout": "",
        "minimumunit": "msecs",
        "maximumunit": "msecs",
        "windowunit": "msecs",
        "msgTimeoutUnit": "msecs",
        "reset": true,
        "startup": false,
        "msgField": "payload.pressed",
        "timestampField": "timestamp",
        "repeatTimeout": false,
        "name": "Drückdauer zählen",
        "x": 890,
        "y": 60,
        "wires": [
            [
                "c89af099.89eb4"
            ],
            []
        ]
    },
    {
        "id": "dc47f393.5ce8c",
        "type": "interval-length",
        "z": "c1827fd5.4fdee",
        "format": "mills",
        "bytopic": false,
        "minimum": "",
        "maximum": "",
        "window": "",
        "timeout": false,
        "msgTimeout": "",
        "minimumunit": "msecs",
        "maximumunit": "msecs",
        "windowunit": "msecs",
        "msgTimeoutUnit": "msecs",
        "reset": true,
        "startup": false,
        "msgField": "payload.paused",
        "timestampField": "timestamp",
        "repeatTimeout": false,
        "name": "Loslassdauer zählen",
        "x": 900,
        "y": 180,
        "wires": [
            [
                "c89af099.89eb4"
            ],
            []
        ]
    },
    {
        "id": "e0268790.7721a8",
        "type": "mqtt out",
        "z": "c1827fd5.4fdee",
        "name": "",
        "topic": "morse/set",
        "qos": "",
        "retain": "",
        "broker": "9897dc40.deeac",
        "x": 1660,
        "y": 200,
        "wires": []
    },
    {
        "id": "1a72444d.0bea3c",
        "type": "switch",
        "z": "c1827fd5.4fdee",
        "name": "Richtige oder falsche Antwort",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "failed",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "solved",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1420,
        "y": 220,
        "wires": [
            [
                "e0268790.7721a8"
            ],
            [
                "f9d2ea49.d8c8d8"
            ]
        ]
    },
    {
        "id": "f9d2ea49.d8c8d8",
        "type": "change",
        "z": "c1827fd5.4fdee",
        "name": "Gelöst senden",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1680,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "7c8fd157.7b14c",
        "type": "inject",
        "z": "c1827fd5.4fdee",
        "name": "",
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 1458,
        "y": 168,
        "wires": [
            [
                "e0268790.7721a8"
            ]
        ]
    },
    {
        "id": "94da8d80.d6d2a",
        "type": "tab",
        "label": "Riddle 2",
        "disabled": false,
        "info": ""
    },
    {
        "id": "9fb3ebde.b2e298",
        "type": "comment",
        "z": "94da8d80.d6d2a",
        "name": "Schritt 2: 3D-Rätsel lösen -> Schlüssel",
        "info": "",
        "x": 170,
        "y": 60,
        "wires": []
    },
    {
        "id": "d5226966.b19558",
        "type": "comment",
        "z": "94da8d80.d6d2a",
        "name": "Schritt 3: Schrank mit Schlüssel öffnen -> Verschlüsselter Text erhalten",
        "info": "",
        "x": 270,
        "y": 100,
        "wires": []
    },
    {
        "id": "c7528b1b.bf0728",
        "type": "comment",
        "z": "94da8d80.d6d2a",
        "name": "Schritt 1: 3D-Rätsel finden, Caesar Schlüssel finden, Morse-Button finden, Simon Says finden, 2x Verschlossene Box finden, Alarmanlagen entschlüsselung erhalten",
        "info": "",
        "x": 560,
        "y": 20,
        "wires": []
    },
    {
        "id": "11fb9008.04fb5",
        "type": "comment",
        "z": "94da8d80.d6d2a",
        "name": "Schritt 4: Text mit Caesar Schlüssel lösen -> Morse-Anleitung und Code erhalten",
        "info": "",
        "x": 300,
        "y": 140,
        "wires": []
    },
    {
        "id": "ac8186f4.a56be8",
        "type": "comment",
        "z": "94da8d80.d6d2a",
        "name": "Schritt 5: Morsen -> eine Kiste öffnet sich und man erhält das Kabelspiel",
        "info": "",
        "x": 270,
        "y": 180,
        "wires": []
    },
    {
        "id": "ad2fac20.fe98d",
        "type": "mqtt in",
        "z": "94da8d80.d6d2a",
        "name": "",
        "topic": "morse",
        "qos": "2",
        "datatype": "json",
        "broker": "9897dc40.deeac",
        "x": 110,
        "y": 240,
        "wires": [
            [
                "bd9a0778.aac098"
            ]
        ]
    },
    {
        "id": "bd9a0778.aac098",
        "type": "subflow:c1827fd5.4fdee",
        "z": "94da8d80.d6d2a",
        "name": "",
        "env": [],
        "x": 270,
        "y": 240,
        "wires": [
            [
                "b09a5127.7243f",
                "33258640.4c66ea"
            ]
        ]
    },
    {
        "id": "d58be18a.a6f96",
        "type": "comment",
        "z": "94da8d80.d6d2a",
        "name": "Schritt 6: Kabelspiel mit Alarmanleitung lösen -> Simon Says leuchtet auf",
        "info": "",
        "x": 280,
        "y": 480,
        "wires": []
    },
    {
        "id": "1f73f2ef.a4cc4d",
        "type": "mqtt in",
        "z": "94da8d80.d6d2a",
        "name": "",
        "topic": "cable-riddle",
        "qos": "2",
        "datatype": "auto",
        "broker": "9897dc40.deeac",
        "x": 510,
        "y": 420,
        "wires": [
            [
                "d5419f08.53927"
            ]
        ]
    },
    {
        "id": "4374ed13.d5c124",
        "type": "subflow:5eb1a328.a0b30c",
        "z": "94da8d80.d6d2a",
        "name": "",
        "env": [],
        "x": 720,
        "y": 500,
        "wires": [
            [
                "1e9b61cd.98f44e",
                "e68819ee.c0f088"
            ]
        ]
    },
    {
        "id": "3fe32cc8.885724",
        "type": "comment",
        "z": "94da8d80.d6d2a",
        "name": "Schritt 7: Simon Says lösen -> Letzte Kiste öffnet sich",
        "info": "",
        "x": 220,
        "y": 680,
        "wires": []
    },
    {
        "id": "70caf819.494418",
        "type": "comment",
        "z": "94da8d80.d6d2a",
        "name": "Schritt 8: RFID-Karte liegt in Kiste mit Hinweis das es geschafft ist",
        "info": "",
        "x": 250,
        "y": 820,
        "wires": []
    },
    {
        "id": "c2c4a31c.17dbf",
        "type": "mqtt in",
        "z": "94da8d80.d6d2a",
        "name": "",
        "topic": "simon",
        "qos": "2",
        "datatype": "json",
        "broker": "9897dc40.deeac",
        "x": 690,
        "y": 640,
        "wires": [
            [
                "c7e2d917.0a0e58"
            ]
        ]
    },
    {
        "id": "e1cf8ca7.a14d9",
        "type": "subflow:b7b2c63b.6f06f8",
        "z": "94da8d80.d6d2a",
        "name": "",
        "env": [],
        "x": 930,
        "y": 700,
        "wires": [
            [
                "62b2ac5d.a71034",
                "b19aca48.756d58"
            ]
        ]
    },
    {
        "id": "b09a5127.7243f",
        "type": "ui_switch",
        "z": "94da8d80.d6d2a",
        "name": "",
        "label": "Morse-Code gelöst",
        "tooltip": "",
        "group": "3f247525.53a01a",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "gate",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "done",
        "oncolor": "green",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "clear",
        "offcolor": "red",
        "x": 530,
        "y": 360,
        "wires": [
            [
                "d5419f08.53927",
                "e98961c4.61076"
            ]
        ]
    },
    {
        "id": "d5419f08.53927",
        "type": "function",
        "z": "94da8d80.d6d2a",
        "name": "control",
        "func": "if (msg.topic === \"gate\") {\n    context.pass = (msg.payload === true) ? true : false;\n    return null;  // exit out early as it's just the control\n}\nif (context.pass) {\n    return msg; // if enabled pass msg\n}\nreturn null; // or drop it",
        "outputs": 1,
        "noerr": 0,
        "x": 710,
        "y": 420,
        "wires": [
            [
                "8e68f7d7.d7ad48",
                "4374ed13.d5c124"
            ]
        ]
    },
    {
        "id": "8e68f7d7.d7ad48",
        "type": "debug",
        "z": "94da8d80.d6d2a",
        "name": "Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 870,
        "y": 420,
        "wires": []
    },
    {
        "id": "be6e0a2.9364af8",
        "type": "inject",
        "z": "94da8d80.d6d2a",
        "name": "",
        "topic": "Aktivieren",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 230,
        "y": 300,
        "wires": [
            [
                "b09a5127.7243f"
            ]
        ]
    },
    {
        "id": "47d08b85.75ebd4",
        "type": "inject",
        "z": "94da8d80.d6d2a",
        "name": "",
        "topic": "Deaktivieren",
        "payload": "false",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 250,
        "y": 340,
        "wires": [
            [
                "b09a5127.7243f"
            ]
        ]
    },
    {
        "id": "62b2ac5d.a71034",
        "type": "ui_switch",
        "z": "94da8d80.d6d2a",
        "name": "",
        "label": "Simon Says gelöst",
        "tooltip": "",
        "group": "3f247525.53a01a",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "gate",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "done",
        "oncolor": "green",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "clear",
        "offcolor": "red",
        "x": 950,
        "y": 760,
        "wires": [
            [
                "fa4903be.5c249",
                "59148c97.a275a4"
            ]
        ]
    },
    {
        "id": "fa4903be.5c249",
        "type": "debug",
        "z": "94da8d80.d6d2a",
        "name": "Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1210,
        "y": 760,
        "wires": []
    },
    {
        "id": "aad1bc64.a9edc",
        "type": "inject",
        "z": "94da8d80.d6d2a",
        "name": "",
        "topic": "Aktivieren",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 690,
        "y": 720,
        "wires": [
            [
                "62b2ac5d.a71034"
            ]
        ]
    },
    {
        "id": "52116605.c1d208",
        "type": "inject",
        "z": "94da8d80.d6d2a",
        "name": "",
        "topic": "Deaktivieren",
        "payload": "false",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 710,
        "y": 760,
        "wires": [
            [
                "62b2ac5d.a71034"
            ]
        ]
    },
    {
        "id": "1e9b61cd.98f44e",
        "type": "ui_switch",
        "z": "94da8d80.d6d2a",
        "name": "",
        "label": "kabelspiel gelöst",
        "tooltip": "",
        "group": "3f247525.53a01a",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "gate",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "done",
        "oncolor": "green",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "clear",
        "offcolor": "red",
        "x": 730,
        "y": 580,
        "wires": [
            [
                "c7e2d917.0a0e58",
                "e1cf8ca7.a14d9"
            ]
        ]
    },
    {
        "id": "c7e2d917.0a0e58",
        "type": "function",
        "z": "94da8d80.d6d2a",
        "name": "control",
        "func": "if (msg.topic === \"gate\") {\n    context.pass = (msg.payload === true) ? true : false;\n    return null;  // exit out early as it's just the control\n}\nif (context.pass) {\n    return msg; // if enabled pass msg\n}\nreturn null; // or drop it",
        "outputs": 1,
        "noerr": 0,
        "x": 930,
        "y": 640,
        "wires": [
            [
                "2f40e5ed.43228a",
                "e1cf8ca7.a14d9"
            ]
        ]
    },
    {
        "id": "2f40e5ed.43228a",
        "type": "debug",
        "z": "94da8d80.d6d2a",
        "name": "Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1110,
        "y": 640,
        "wires": []
    },
    {
        "id": "7fd3752f.62a79c",
        "type": "inject",
        "z": "94da8d80.d6d2a",
        "name": "",
        "topic": "Deaktivieren",
        "payload": "false",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 490,
        "y": 580,
        "wires": [
            [
                "1e9b61cd.98f44e"
            ]
        ]
    },
    {
        "id": "c5e9bf2b.2e25b",
        "type": "inject",
        "z": "94da8d80.d6d2a",
        "name": "",
        "topic": "Aktivieren",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 470,
        "y": 540,
        "wires": [
            [
                "1e9b61cd.98f44e"
            ]
        ]
    },
    {
        "id": "c00b50f4.a3846",
        "type": "ui_switch",
        "z": "94da8d80.d6d2a",
        "name": "",
        "label": "Finale Box öffnen",
        "tooltip": "",
        "group": "3f247525.53a01a",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "gate",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 950,
        "y": 920,
        "wires": [
            [
                "59148c97.a275a4"
            ]
        ]
    },
    {
        "id": "482a009c.49b1",
        "type": "inject",
        "z": "94da8d80.d6d2a",
        "name": "",
        "topic": "Aktivieren",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 690,
        "y": 880,
        "wires": [
            [
                "c00b50f4.a3846"
            ]
        ]
    },
    {
        "id": "3566257b.58fbfa",
        "type": "inject",
        "z": "94da8d80.d6d2a",
        "name": "",
        "topic": "Deaktivieren",
        "payload": "false",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 710,
        "y": 920,
        "wires": [
            [
                "c00b50f4.a3846"
            ]
        ]
    },
    {
        "id": "bbc52c81.639ca",
        "type": "mqtt out",
        "z": "94da8d80.d6d2a",
        "name": "",
        "topic": "morse/set",
        "qos": "",
        "retain": "",
        "broker": "9897dc40.deeac",
        "x": 1031,
        "y": 212,
        "wires": []
    },
    {
        "id": "85aabfbf.41d85",
        "type": "inject",
        "z": "94da8d80.d6d2a",
        "name": "",
        "topic": "",
        "payload": "reset",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 829,
        "y": 180,
        "wires": [
            [
                "bbc52c81.639ca"
            ]
        ]
    },
    {
        "id": "33258640.4c66ea",
        "type": "debug",
        "z": "94da8d80.d6d2a",
        "name": "Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 492,
        "y": 317,
        "wires": []
    },
    {
        "id": "e68819ee.c0f088",
        "type": "debug",
        "z": "94da8d80.d6d2a",
        "name": "Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 910,
        "y": 544,
        "wires": []
    },
    {
        "id": "b19aca48.756d58",
        "type": "debug",
        "z": "94da8d80.d6d2a",
        "name": "Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1202,
        "y": 722,
        "wires": []
    },
    {
        "id": "e4d32d93.b9365",
        "type": "mqtt out",
        "z": "94da8d80.d6d2a",
        "name": "",
        "topic": "kabel-kiste/set",
        "qos": "",
        "retain": "",
        "broker": "9897dc40.deeac",
        "x": 1062,
        "y": 362,
        "wires": []
    },
    {
        "id": "e98961c4.61076",
        "type": "function",
        "z": "94da8d80.d6d2a",
        "name": "Ändere Kisten status",
        "func": "if(msg.payload == true){\n    msg.payload = \"open\";\n}else{\n     msg.payload = \"close\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 819,
        "y": 361,
        "wires": [
            [
                "e4d32d93.b9365"
            ]
        ]
    },
    {
        "id": "c02f6d5a.d5dab",
        "type": "mqtt out",
        "z": "94da8d80.d6d2a",
        "name": "",
        "topic": "riddle2-kiste/set",
        "qos": "",
        "retain": "",
        "broker": "9897dc40.deeac",
        "x": 1478,
        "y": 857,
        "wires": []
    },
    {
        "id": "59148c97.a275a4",
        "type": "function",
        "z": "94da8d80.d6d2a",
        "name": "Ändere Kisten status",
        "func": "if(msg.payload == true){\n    msg.payload = \"open\";\n}else{\n     msg.payload = \"close\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1235,
        "y": 856,
        "wires": [
            [
                "c02f6d5a.d5dab"
            ]
        ]
    },
    {
        "id": "9897dc40.deeac",
        "type": "mqtt-broker",
        "z": "",
        "name": "MQTT",
        "broker": "intia",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "3f247525.53a01a",
        "type": "ui_group",
        "z": "",
        "name": "Rätsel 2",
        "tab": "1da15faa.f267e",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1da15faa.f267e",
        "type": "ui_tab",
        "z": "",
        "name": "Escape Game",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]
